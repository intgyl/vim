" .vimrc - Vim configuration file.
"
" Copyright (c) 2013 gyl. All Rights Reserved.
"
" Maintainer: gyl
" Created: 2013-07-02

set nocompatible
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

"********************************************************************************
"from http://vim-scripts.org/vim/scripts.html
"you can just write Bundle 'name'

Bundle 'https://github.com/fatih/vim-go'
Bundle 'https://github.com/Lokaltog/vim-powerline'
Bundle 'Auto-Pairs'
Bundle 'autoload_cscope.vim'
Bundle 'https://github.com/Shougo/neosnippet.vim'
Bundle 'https://github.com/preservim/nerdcommenter'
Bundle 'https://github.com/Shougo/deoplete.nvim'
Bundle 'https://github.com/honza/vim-snippets'
" Bundle 'https://github.com/vim-scripts/vcscommand.vim.git'
" Bundle 'bronson/vim-trailing-whitespace'
" Bundle 'https://github.com/axelf4/vim-strip-trailing-whitespace'
Bundle 'https://github.com/ntpeters/vim-better-whitespace'
Bundle 'https://github.com/majutsushi/tagbar'
Bundle 'https://github.com/luochen1990/rainbow'
Bundle 'https://github.com/preservim/nerdtree'
Bundle 'https://github.com/tpope/vim-surround'
Bundle 'https://github.com/Yggdroot/indentLine'
" Bundle 'https://github.com/Valloric/YouCompleteMe'
"********************************************************************************

" Enable file type detection.
filetype plugin indent on
" Syntax highlighting.
syntax on
" Setting colorscheme
"********************************************************************************
" Config for vim72

" file is large from 1MB
let g:LargeFile = 1024 * 1024 * 1
augroup LargeFile
autocmd BufReadPre * let f=getfsize(expand("<afile>")) | if f > g:LargeFile || f == -2 | call LargeFile() | endif
augroup END
function LargeFile()
" no syntax highlighting etc
set eventignore+=FileType
" save memory when other file is viewed
setlocal bufhidden=unload
" is read-only (write with :w new_filename)
" setlocal buftype=nowrite
" no undo possible
setlocal undolevels=-1
" display message
autocmd VimEnter *  echo "The file is larger than " . (g:LargeFile / 1024 ) . " MB, so some options are changed (see .vimrc for details)."
endfunction

if v:version >= 702
	set   autoindent
	set   autoread
	set   autowrite
	set   background=dark
	set   backspace=indent,eol,start
	set   nobackup
	set   cindent
	set   cinoptions=:0
	set   completeopt=longest,menuone
	set   encoding=utf-8
	set   noexpandtab
	set   fileencodings=utf-8,gb2312,gbk,gb18030,chinese
	set   fileformat=unix
	set   nofoldenable
	" set   foldmethod=syntax "折叠
	set   foldlevel=99
	"set  expandtab "tab键展开为空格
	set   cursorline
	" set   fillchars=vert:\│
	hi    CursorLine   cterm=NONE ctermbg=darkblue guibg=black guifg=NONE
	" hi VertSplit guibg=#31312D guifg=#526A83 ctermfg=White ctermbg=Black term=none cterm=none gui=none
	hi    VertSplit  ctermfg=white term=none cterm=none gui=none
	set   helpheight=10
	set   helplang=cn
	set   hidden
	set   history=100
	set   hlsearch
	set   ignorecase
	set   incsearch
	set   laststatus=2
	"set   mouse=n
	set   selection=exclusive
	set   selectmode=mouse,key

	set   number
	set   pumheight=10
	set   ruler
	set   scrolloff=5
	set   shiftwidth=8
	set   showcmd
	set   smartindent
	set   smartcase
	set   tabstop=8
	set   termencoding=utf-8
	" set   textwidth=280
	set   whichwrap=h,l
	set   wildignore=*.bak,*.o,*.e,*~
	set   wildmenu
	set   wildmode=list:longest,full
	set   nowrap
	set   iskeyword+=-
	set   so=4
	set   sidescroll=10
	set   cmdheight=1
	"set  invlist "show all char
	"set  nolist
	set   tag=tags;

	" 显示tab和空格
	set list
	" 设置tab和空格样式
	set lcs=tab:\┊\ ,nbsp:%,trail:-
	" 设定行首tab为灰色
	highlight LeaderTab guifg=#666666
	" 匹配行首tab
	match LeaderTab /^\t/"
endif

"********************************************************************************

" Config for win32 gvim.
if has("win32")
	set   guioptions-=T
	set   guioptions-=m
	set   guioptions-=r
	set   guioptions-=l
	set   lines=26
	set   columns=90
	source $VIMRUNTIME/delmenu.vim
	source $VIMRUNTIME/menu.vim
	language messages zh_CN.utf-8
endif

if &diff
	colors my
endif

"********************************************************************************
"autocmd VimEnter * NERDTree
autocmd VimEnter * wincmd w
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let NERDTreeWinPos="right"
let g:NERDTreeSize=15
" let g:NERDTreeShowLineNumbers=1

"********************************************************************************

 "AUTO COMMANDS:
 "auto expand tab to blanks
 "autocmd FileType c,cpp

 "Restore the last quit position when open file.

autocmd BufReadPost *
			\ if line("'\"") > 0 && line("'\"") <= line("$") |
			\     exe "normal g'\"" |
			\ endif
"********************************************************************************

function! TagbarByFileType()
	if &filetype!="go"
		let g:tagbar_width=35
		let g:tagbar_left = 1
		"autocmd VimEnter * nested :TagbarOpen
		autocmd VimEnter * nested :call tagbar#autoopen(1)
		nmap  <F2> :TagbarToggle<cr>
	endif
endfunction
autocmd FileType * call TagbarByFileType()
autocmd FileType java set shiftwidth=4 | set expandtab
autocmd FileType python set shiftwidth=4 | set expandtab
let g:tagbar_left = 1

"********************************************************************************
"
" SHORTCUT SETTINGS:
" Set mapleader
let mapleader=","

"********************************************************************************
nmap wq :wq!<ENTER>
nmap Wq :wq!<ENTER>
nmap q :q<ENTER>
nmap Q :q<ENTER>
nmap wQ :wq!<ENTER>
nmap WQ :wq!<ENTER>
"nnoremap <C-w> <C-w>w
nnoremap <space> $
nnoremap s %
nnoremap ; *
nnoremap f 0
nnoremap e #
noremap <leader>n :set mouse=n<ENTER>
noremap <leader>= :set mouse=<ENTER>
noremap <leader>w :set wrap<ENTER>
noremap <leader>q :set nowrap<ENTER>
noremap <C-k>  <C-]>
noremap <C-j>  <C-t>
noremap <C-h> <C-w>h
noremap <C-l> <C-w>l

"insert mode
inoremap <C-a> <Home>
inoremap <C-e> <End>
inoremap <C-b> <Left>
inoremap <C-f> <Right>

map <F3> : NERDTreeToggle<CR>
map <F5> :Sex<Enter>
map <F6> :Sex!<Enter>

nmap t16 :%!xxd<CR>
nmap t2 :%!xxd -r<CR>

nmap delline :g/^$/d

nnoremap <C-e> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

"********************************************************************************
" indentLine
let g:indentLine_enabled = 1
" let g:indentLine_conceallevel = 2
let g:indentLine_showFirstIndentLevel = 1
let g:indentLine_color_term = 255
let g:indentLine_first_char = '┊'
let g:indentLine_char = '┊'
" let g:indentLine_char_list = ['|', '¦', '┆', '┊']
"********************************************************************************
"vim-go
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_fmt_command = "goimports"
"********************************************************************************
"Config for Auto-Pairs

let g:AutoPairsShortcutToggle = '<leader>a'
"let g:AutoPairsShortcutFastWrap
"let g:AutoPairsShortcutJump
"let g:AutoPairsShortcutBackInsert

"********************************************************************************

let g:NERDSpaceDelims=1

"********************************************************************************
nnoremap <leader>y :let g:ycm_auto_trigger=0<CR>
nnoremap <leader>Y :let g:ycm_auto_trigger=1<CR>
let g:ycm_server_python_interpreter='/usr/bin/python'
let g:ycm_global_ycm_extra_conf = '/home/gyl/.vim/config/ycm_extra_conf.py'
" 不显示开启vim时检查ycm_extra_conf文件的信息
let g:ycm_confirm_extra_conf=0
" 开启基于tag的补全，可以在这之后添加需要的标签路径
let g:ycm_collect_identifiers_from_tags_files=1
"注释和字符串中的文字也会被收入补全
let g:ycm_collect_identifiers_from_comments_and_strings = 0
" 输入第2个字符开始补全
let g:ycm_min_num_of_chars_for_completion=2
" 禁止缓存匹配项,每次都重新生成匹配项
let g:ycm_cache_omnifunc=0
" 开启语义补全
let g:ycm_seed_identifiers_with_syntax=1
"在注释输入中也能补全
let g:ycm_complete_in_comments=1
"在字符串输入中也能补全
let g:ycm_complete_in_strings=1
let g:ycm_autoclose_preview_window_after_completion=1
" let g:ycm_key_invoke_completion = '<C-;>'
" 设置在下面几种格式的文件上屏蔽ycm
let g:ycm_filetype_blacklist = {
      \ 'tagbar' : 1,
      \ 'nerdtree' : 1,
      \}
let g:ycm_semantic_triggers =  {
			\ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
			\ 'cs,lua,javascript': ['re!\w{2}'],
			\ }
hi YcmErrorSection  cterm=NONE ctermbg=darkblue guibg=black guifg=NONE
let g:ycm_show_diagnostics_ui = 0
"********************************************************************************
 set t_Co=256

 let g:Powerline_colorscheme = 'solarized16'
 let g:Powerline_stl_path_style = 'full'
 "let g:Powerline_symbols = 'unicode'
 let g:Powerline_mode_n = 'NORMAL'
 "highlight StatusLine cterm=bold ctermfg=yellow ctermbg=blue
 call Pl#Theme#RemoveSegment('fileformat')
 call Pl#Theme#RemoveSegment('fileencoding')
 call Pl#Theme#RemoveSegment('filetype')
 " call Pl#Theme#RemoveSegment('lineinfo')
"********************************************************************************
" cscope.vim
if has("cscope")
	set csto=1
	set cst
	set nocsverb
	if filereadable("cscope.out")
		cs add cscope.out
	endif
	set csverb
endif
" OmniCppComplete.vim
let g:OmniCpp_DefaultNamespaces=["std"]
let g:OmniCpp_MayCompleteScope=1
let g:OmniCpp_SelectFirstItem=2

"********************************************************************************
"neosnippet setting{{{
" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
"xmap <C-l>     <Plug>(neosnippet_start_unite_snippet_target)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
            \ "\<Plug>(neosnippet_expand_or_jump)"
            \: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
            \ "\<Plug>(neosnippet_expand_or_jump)"
            \: "\<TAB>"
let g:SuperTabDefaultCompletionType = "<c-x><c-u>"

" For snippet_complete marker.
if has('conceal')
    set conceallevel=2 concealcursor=i
endif

" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1

" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'
let g:neosnippet#enable_preview=1
"}}}

"********************************************************************************

source $VIMRUNTIME/ftplugin/man.vim
" plugin shortcuts
function! RunShell(Msg, Shell)
	echo a:Msg . '...'
	call system(a:Shell)
	echon 'done'
endfunction
set cscopequickfix=s-,c-,d-,i-,t-,e-
nmap <leader>sa :cs add cscope.out<cr>
nmap <leader>ss :cs find s <C-R>=expand("<cword>")<cr><cr>
nmap <leader>sg :cs find g <C-R>=expand("<cword>")<cr><cr>
nmap <leader>sc :cs find c <C-R>=expand("<cword>")<cr><cr>
nmap <leader>st :cs find t <C-R>=expand("<cword>")<cr><cr>
nmap <leader>se :cs find e <C-R>=expand("<cword>")<cr><cr>
nmap <leader>sf :cs find f <C-R>=expand("<cfile>")<cr><cr>
nmap <leader>si :cs find i <C-R>=expand("<cfile>")<cr><cr>
nmap <leader>sd :cs find d <C-R>=expand("<cword>")<cr><cr>
nmap <leader>zz <C-w>o
nmap <leader>gs :GetScripts<cr>

let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle
